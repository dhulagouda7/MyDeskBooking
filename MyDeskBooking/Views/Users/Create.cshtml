@model BookMyDesk.Models.EntityModels.User

@{
    ViewBag.Title = "Create User";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Create New User</h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-group mb-3">
                            @Html.LabelFor(m => m.Username, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.Username, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.LabelFor(m => m.Email, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.LabelFor(m => m.RoleId, "Role", new { @class = "form-label" })
                            @Html.DropDownListFor(m => m.RoleId, (SelectList)ViewBag.RoleId, "Select Role", new { @class = "form-select" })
                            @Html.ValidationMessageFor(m => m.RoleId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.LabelFor(m => m.TeamId, "Team", new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.TeamId, new { @class = "form-control", type = "number", min = "1" })
                            @Html.ValidationMessageFor(m => m.TeamId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-check mb-3">
                            @Html.CheckBoxFor(m => m.IsActive, new { @class = "form-check-input" })
                            @Html.LabelFor(m => m.IsActive, new { @class = "form-check-label" })
                            @Html.ValidationMessageFor(m => m.IsActive, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Create
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // Add client-side validation for TeamId to ensure it's a positive number
        $(document).ready(function() {
            $.validator.addMethod("positive", function (value) {
                return value > 0;
            }, "Team ID must be a positive number");

            $("#TeamId").rules("add", { positive: true });
        });
    </script>
}