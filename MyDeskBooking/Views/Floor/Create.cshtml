@model MyDeskBooking.Models.EntityModels.Floor
@{
    ViewBag.Title = "Add New Floor";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4>Add New Floor</h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="mb-3">                          
                            <label class="form-label">Location</label>
                            @Html.DropDownList("LocationId",
                                ViewBag.Locations as SelectList,
                                "-- Select Location --",
                                new { @class = "form-select", required = "required" })
                            @Html.ValidationMessage("LocationId", "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Building</label>
                            @Html.DropDownListFor(m => m.BuildingId,
                                ViewBag.Buildings as SelectList,
                                "-- Select Building --",
                                new { @class = "form-select", required = "required" })
                            @Html.ValidationMessageFor(m => m.BuildingId, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Floor Number</label>
                            @Html.TextBoxFor(m => m.FloorNumber,
                                new { @class = "form-control", type = "number", required = "required", min = "1" })
                            @Html.ValidationMessageFor(m => m.FloorNumber, "", new { @class = "text-danger" })
                        </div>

                        <div class="mb-3">
                            <button type="submit" class="btn btn-primary">Create Floor</button>
                            @Html.ActionLink("Cancel", "Index", new { buildingId = Model.BuildingId }, new { @class = "btn btn-secondary" })
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            // Store initial building options
            window.buildingOptions = $('#BuildingId option').clone();
            debugger
            // Bind change event
            $('#LocationId').change(function() {
                updateBuildingDropdown();
            });
            
            // Initial update if location is pre-selected
            updateBuildingDropdown();
        });

        function updateBuildingDropdown() {
            debugger;
            var locationId = $('#LocationId').val();
            var buildingSelect = $('#BuildingId');
            var currentValue = buildingSelect.val();

            // Clear and add default option
            buildingSelect.empty();
            buildingSelect.append($('<option>').val('').text('-- Select Building --'));

            // Add filtered options
            if (locationId) {
                window.buildingOptions.each(function() {
                    var option = $(this);
                    if (!option.val()) return; // Skip default option
                    var buildingLocationId = option.val();
                    if (buildingLocationId === locationId) {
                        buildingSelect.append(option.clone());
                    }
                });
            } else {
                // Show all buildings if no location selected
                window.buildingOptions.each(function() {
                    var option = $(this);
                    if (option.val()) { // Skip default option
                        buildingSelect.append(option.clone());
                    }
                });
            }

            // Restore previous selection if possible
            if (currentValue) {
                buildingSelect.val(currentValue);
                if (!buildingSelect.val()) {
                    buildingSelect.val('');
                }
            }

            // Trigger validation if form is already validated
            if (buildingSelect.closest('form').data('validator')) {
                buildingSelect.valid();
            }
        }
    </script>
}
