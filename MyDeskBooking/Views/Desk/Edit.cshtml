@model MyDeskBooking.Models.EntityModels.Desk
@{
    ViewBag.Title = "Edit Desk";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h2>Edit Desk</h2>
                        <a href="@Url.Action("Index")" class="btn btn-secondary">Back to List</a>
                    </div>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.DeskId)
                        <div class="mb-3">
                            <label class="form-label">Building</label>
                            @Html.DropDownList("buildingId", (SelectList)ViewBag.Buildings, 
                                "Select Building", new { @class = "form-select", required = "required" })
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Floor</label>
                            @Html.DropDownListFor(m => m.FloorId, (SelectList)ViewBag.Floors, 
                                "Select Floor", new { @class = "form-select", required = "required" })
                            @Html.ValidationMessageFor(m => m.FloorId, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Desk Number</label>
                            @Html.TextBoxFor(m => m.DeskNumber, new { @class = "form-control", required = "required", maxlength = "20" })
                            @Html.ValidationMessageFor(m => m.DeskNumber, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            @Html.DropDownListFor(m => m.Status, 
                                new SelectList(new[] { "Available", "Maintenance", "Reserved" }),
                                new { @class = "form-select", required = "required" })
                            @Html.ValidationMessageFor(m => m.Status, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3 form-check">
                            @Html.CheckBoxFor(m => m.IsReserved, new { @class = "form-check-input" })
                            <label class="form-check-label">Permanently Reserved</label>
                        </div>
                        if (!ViewData.ModelState.IsValid)
                        {
                            <div class="alert alert-danger">
                                @Html.ValidationSummary(true)
                            </div>
                        }
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#buildingId').change(function () {
                var buildingId = $(this).val();
                if (buildingId) {
                    $.get('@Url.Action("GetFloorsByBuilding")', { buildingId: buildingId }, function (data) {
                        var floorSelect = $('#FloorId');
                        floorSelect.empty();
                        floorSelect.append($('<option>').text('Select Floor'));
                        $.each(data, function (i, item) {
                            floorSelect.append($('<option>').val(item.value).text(item.text));
                        });
                    });
                } else {
                    $('#FloorId').empty().append($('<option>').text('Select Floor'));
                }
            });
        });
    </script>
}
